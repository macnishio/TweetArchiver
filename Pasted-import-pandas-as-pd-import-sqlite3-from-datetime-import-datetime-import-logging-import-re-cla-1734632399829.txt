import pandas as pd
import sqlite3
from datetime import datetime
import logging
import re

class XPostParser:
    def __init__(self, db_path="x_posts.db"):
        self.db_path = db_path
        self.setup_logging()
        
    def setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('parser.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

    def create_database(self):
        """データベースとテーブルの作成"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS posts (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        post_id TEXT UNIQUE,
                        timestamp TIMESTAMP,
                        author TEXT,
                        content TEXT,
                        urls TEXT,
                        reply_to TEXT,
                        author_id TEXT,
                        hashtags TEXT,
                        mentions TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                conn.commit()
                self.logger.info("データベースとテーブルの作成が完了しました")
        except sqlite3.Error as e:
            self.logger.error(f"データベース作成エラー: {e}")
            raise

    def clean_text(self, text):
        """テキストのクリーニング"""
        if not isinstance(text, str):
            return ""
        # 特殊文字の削除と空白の正規化
        text = re.sub(r'\s+', ' ', text)
        return text.strip()

    def extract_hashtags(self, content):
        """ハッシュタグの抽出"""
        if not isinstance(content, str):
            return []
        return re.findall(r'#(\w+)', content)

    def extract_mentions(self, content):
        """メンションの抽出"""
        if not isinstance(content, str):
            return []
        return re.findall(r'@(\w+)', content)

    def parse_timestamp(self, timestamp_str):
        """タイムスタンプのパース"""
        try:
            return pd.to_datetime(timestamp_str)
        except:
            self.logger.warning(f"無効なタイムスタンプ: {timestamp_str}")
            return None

    def process_file(self, file_path, delimiter=',', encoding='utf-8'):
        """ファイルの処理とデータベースへの登録"""
        try:
            df = pd.read_csv(file_path, delimiter=delimiter, encoding=encoding)
            self.logger.info(f"ファイル読み込み完了: {len(df)}行")

            with sqlite3.connect(self.db_path) as conn:
                for _, row in df.iterrows():
                    try:
                        content = self.clean_text(row.get('content', ''))
                        hashtags = ','.join(self.extract_hashtags(content))
                        mentions = ','.join(self.extract_mentions(content))
                        
                        cursor = conn.cursor()
                        cursor.execute("""
                            INSERT OR REPLACE INTO posts 
                            (post_id, timestamp, author, content, urls, reply_to, 
                             author_id, hashtags, mentions)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                        """, (
                            str(row.get('post_id', '')),
                            self.parse_timestamp(row.get('timestamp')),
                            self.clean_text(row.get('author', '')),
                            content,
                            self.clean_text(row.get('urls', '')),
                            str(row.get('reply_to', '')),
                            str(row.get('author_id', '')),
                            hashtags,
                            mentions
                        ))
                        
                    except Exception as e:
                        self.logger.error(f"行の処理中にエラー: {e}")
                        continue
                        
                conn.commit()
                self.logger.info("データベースへの登録が完了しました")
                
        except Exception as e:
            self.logger.error(f"ファイル処理エラー: {e}")
            raise

if __name__ == "__main__":
    parser = XPostParser()
    parser.create_database()
    parser.process_file("x_posts.csv")  # ファイル名を適宜変更してください